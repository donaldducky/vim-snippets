# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
		${3}
	}${2:;}
# Immediate function
snippet (f
	(function (${1}) {
		${3:/* code */}
	}(${2}));
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
		var ${3:v} = $1[$2];${4:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
		var ${3:v} = $1[$2];${4:}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# try
snippet try
	try {
		${1:/* code */}
	} catch (${2:e}) {
		${3:/* handle error */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${3}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# console.log (Firebug)
snippet cl
	console.log(${1});
# return
snippet ret
	return ${1:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
		${3:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${1})
# docstring
snippet /**
	/**
	 * ${1:description}
	 *
	 */
snippet @par
	@param {${1:type}} ${2:name} ${3:description}
snippet @ret
	@return {${1:type}} ${2:description}
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3:// initial code ...}

		$1 = function ($2) {
			${4:// main code}
		};
	};
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};
		
		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${3:// code ...}

		return instance;
	}
# Crockford's object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
# mocha / chai
# ============
snippet desc
	describe('${1:description}', function () {
	  ${2}
	});
snippet it
	it('should ${1:blah blah}', function () {
		${2}
	});
snippet bef
	beforeEach(function () {
	  ${1}
	});
snippet aft
	afterEach(function () {
	  ${1}
	});
snippet exp
	expect(${1}).toBe(${2});
# dev
# ===
snippet log
	console.log('%c ${1:message}', 'background: #222; color: #bada55');
# backbone
# ========
snippet bbm
	Backbone.Model.extend({
	});
snippet bbc
	$1${2:s} = Backbone.Collection.extend({
	  model: ${1:Model}
	});
snippet bbv
	Backbone.View.extend({
	  template: '${1:templateName}'
	});
snippet fn
	function() {
	  ${2}
	}${1}
# grunt
# =====
snippet gf
	module.exports = function(grunt) {
	  grunt.initConfig({
	    ${1}
	  });
	
	  grunt.loadNpmTasks('grunt-regarde');
	  grunt.loadNpmTasks('grunt-contrib-livereload');
	
	  grunt.registerTask('watch', [ 'livereload-start', 'regarde' ]);
	};
snippet gnt
	grunt.loadNpmTasks('grunt-${1:contrib-less}');${2}
snippet gt
	grunt.registerTask('${1:default}', [ '${2:test}' ]);${3}
snippet greg
	regarde: {
	  ${1:js}: {
	    files: [ 'app/**/*.${2:js}' ],
	    tasks: [ '${3:livereload}' ]
	  }${4}
	}
snippet ghbs
	handlebars: {
	  compile: {
	    options: {
	      namespace: '${1:JST}'
	    },
	    files: {
	      '${2:build/templates.js}': [ '${3:app/}templates/**/*.hbs' ]
	    }
	  }
	}${4}
snippet gcat
	concat: {
	  app: {
	    src: [
	      'components/jquery/jquery.js',
	      'components/underscore/underscore.js',
	      'components/backbone/backbone.js',
	      'components/layoutmanager/backbone.layoutmanager.js',
	      'components/handlebars.js/dist/handlebars.js',
	      'build/templates.js',
	      'app/config.js',
	      'app/models/**/*.js',
	      'app/collections/**/*.js',
	      'app/views/**/*.js',
	      'app/router.js',
	      'app/app.js'
	    ],
	    dest: 'public/js/app.js'
	  }
	}
snippet gless
	less: {
	  prod: {
	    options: {
	      yuicompress: true
	    },
	    files: {
	      'public/css/styles.css': 'less/styles.less',
	    }
	  }
	}
snippet gcp
	copy: {
	  public: {
	    files: [
	      { src: [ 'components/requirejs/require.js' ], dest: 'public/js/lib/' }
	    ]
	  }
	}
